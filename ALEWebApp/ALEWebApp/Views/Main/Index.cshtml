@using System.Collections
@using System.Web.UI.WebControls
@using ALEWebApp.Helpers
@using Common
@using Common.Models
@model ALEWebApp.Models.LogicStatementViewModel

<!-- Helper method for recursively constructing a tree-->
@helper ShowTree(IEnumerable<Node> children)
{

foreach (var node in children)
{
    if (node.Token.IsPredicate)
    {
            <li>
                <a href="#">@node.Token.ToString()</a>
            </li>
    }
    else if (node.Token.IsConnective)
    {
            <li>
                <a href="#">@node.Token.ToString()</a>
                <ul>
                    @if (node.Children.Any())
                    {
                        @ShowTree(node.Children)
                    }
                </ul>
            </li>

    }
}
}

<div class="col-12 p-5 content-wrapper">
    @using (Html.BeginForm("Construct", "Main", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-6">
                <div class="h3">
                    Possible valid propositions (click to choose)
                </div>
                <hr />
                <div class="list-group">
                    @foreach (var prop in Model.ExampleValidPropositions)
                    {
                        <button type="button" class="list-group-item list-group-item-action propositionExample">
                            @prop
                        </button>
                    }
                </div>
                <br />
               
            </div>
            <div class="col-6">
                <div class="h3">
                    Quick Results (scroll down for more details)
                </div>
                <hr />
                <div class="table-responsive">
                    <table class="table">
                        <tr>
                            <th>
                                HC
                            </th>
                            <td>
                                @Model.TableSchemeHashCode
                            </td>
                        </tr>

                        <tr>
                            <th>DNF HC</th>
                            <td>@Model.DNFTableSchemeHashCode</td>
                        </tr>
                      
                        <tr>
                            <th>CNF HC</th>
                            <td>@Model.CNFTableSchemeHashCode</td>
                        </tr>
                        <tr>
                            <th>Infix Notation</th>
                            <td>@Model.InfixNotation</td>
                        </tr>
                       
                    </table>
                </div>
                <button type="button" class="btn btn-info float-right" id="btnRandomProp">
                    Generate random proposition
                </button>
            </div>

        </div>
        <div class="row">

            <div class="col-12">
                
                <div class="form-group">
                    @Html.EditorFor(m => m.InputProposition, new {htmlAttributes = new {@class = @Html.ControlClass(), @id = "tbxInputProposition", @PlaceHolder = "Logical Propostion"}})
                    @Html.ValidationMessageFor(m => m.InputProposition)
                </div>
                <button type="submit" class="btn btn-lg btn-primary float-right">Construct</button>
            </div>

            
         

        </div>


        <div class="row">
            @if (Model.Tree != null)
            {
                <br />
                <div class="col-12 align-content-center">
                    <hr />
                    <h2> Tree Construct (Assignment 1)</h2>
                    <div class="parent">
                        <div class="tree">

                            <ul>
                                <li>

                                    <!-- Root -->
                                    <a href="#">@Model.Tree.Token.ToString()</a>
                                    <ul>
                                        @ShowTree(Model.Tree.Children)
                                    </ul>


                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            }

            @if (Model.TableScheme != null)
            {
                <br />
                <div class="col-12">

                    <hr />

                    <h2>Non simplified Truth Table (Assignment 2)</h2>
                    <h3>
                        <small>Result as Hash code: </small><span style="color: coral">@Model.TableSchemeHashCode</span>
                    </h3>


                    <table class="table">
                        <thead class="thead-inverse">
                            <tr>
                                @foreach (var tableHeader in Model.TableScheme.TableHeaders)
                                {
                                    <th>@tableHeader</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var tableRow in Model.TableScheme.DataRows)
                            {
                                <tr>
                                    @foreach (var cellValue in tableRow.Values)
                                    {
                                        <td>
                                            @cellValue
                                        </td>
                                    }
                                    <td>
                                        @{
                                            string res = tableRow.Result ? "1" : "0";
                                        }
                                        @res
                                    </td>
                                </tr>
                                            }
                        </tbody>

                    </table>



                </div>
                                            }


            @if (Model.TableSchemeSimplified != null)
            {
                <br />
                <div class="col-12">

                    <hr />
                    <h2> Simplified Truth Table (Assignment 3)</h2>

                    <table class="table">
                        <thead class="thead-inverse">
                            <tr>
                                @foreach (var tableHeader in Model.TableSchemeSimplified.TableHeaders)
                                {
                                    <th>@tableHeader</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var tableRow in Model.TableSchemeSimplified.DataRows)
                            {
                                <tr>
                                    @foreach (var cellValue in tableRow.Values)
                                    {
                                        <td>
                                            @cellValue
                                        </td>
                                    }
                                    <td>
                                        @{
                                            string res = tableRow.Result ? "1" : "0";
                                        }
                                        @res
                                    </td>
                                </tr>
                                            }
                        </tbody>

                    </table>


                </div>
                                            }

            @if (Model.DNFTableScheme != null && Model.DNFTableSchemeSimplified != null)
            {
                <br />
                <div class="col-12">

                    <hr />
                    <h2> DNF (Assignment 4)</h2>

                    <h3>
                        <small>DNF table Scheme: </small><span style="color: coral">@Model.DNFTableScheme</span>
                    </h3>

                    <h3>
                        <small>DNF table Scheme simplified: </small><span style="color: coral">@Model.DNFTableSchemeSimplified</span>
                    </h3>

                </div>
            }

            @if (Model.CNFTableScheme != null && Model.CNFTableSchemeSimplified != null)
            {
                <br />
                <div class="col-12">

                    <hr />
                    <h2> CNF (Extra)</h2>

                    <h3>
                        <small>CNF table Scheme: </small><span style="color: coral">@Model.CNFTableScheme</span>
                    </h3>

                    <h3>
                        <small>CNF table Scheme simplified: </small><span style="color: coral">@Model.CNFTableSchemeSimplified</span>
                    </h3>

                </div>
            }

            @if (Model.Nandified != null)
            {
                <br />
                <div class="col-12">

                    <hr />
                    <h2> Nandify (Assignment 5)</h2>

                    <h3>
                        <small>Nandified Proposition: </small><span style="color: coral">@Model.Nandified</span>
                    </h3>

                </div>
            }


        </div>
                                            }
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryValidation")
}
