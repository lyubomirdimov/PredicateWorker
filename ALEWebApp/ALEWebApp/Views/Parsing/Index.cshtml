@using System.Collections
@using ALEWebApp.Helpers
@using Common
@model ALEWebApp.Models.LogicStatementViewModel
<div class="col-12 p-5 content-wrapper">
    @using (Html.BeginForm("Construct", "Parsing", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-9">
                <div class="h3">
                    List of Valid Logical propositions. <small> on click the proposition is entered in the text field</small>
                </div>
                <hr />
                <div class="list-group">
                    @foreach (var prop in Model.ExampleValidPropositions)
                    {

                        <button type="button" class="list-group-item list-group-item-action propositionExample">
                            @prop
                        </button>
                    }
                </div>
                <br/>
                <button type="button" class="btn btn-primary" id="btnRandomProp">
                    Generate random proposition
                </button>
            </div>
            
        </div>
        <hr />
        <div class="row">

            <div class="col-6">

                <div class="form-group">
                    @Html.LabelFor(m => m.InputProposition, new { })
                    @Html.EditorFor(m => m.InputProposition, new { htmlAttributes = new { @class = @Html.ControlClass(), @id = "tbxInputProposition" } })
                    @Html.ValidationMessageFor(m => m.InputProposition)
                </div>

            </div>
            <div class="col-6"></div>
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Construct</button>
            </div>

        </div>
        <div class="row">
            <div class="col-12 align-content-center">
                <div class="parent">
                    <div class="tree">

                        <ul>
                            <li>
                                @if (Model?.Tree != null)
                                {
                                    <!-- Root -->
                                    <a href="#">@Model.Tree.Token.ToString()</a>
                                    <ul>

                                        @ShowTree(Model.Tree.Children)

                                        @helper ShowTree(IEnumerable<Node> children)
                                        {

foreach (var node in children)
{
    if (node.Token.IsPredicate)
    {
            <li>
                <a href="#">@node.Token.ToString()</a>
            </li>
    }
    else if (node.Token.IsConnective)
    {
            <li>
                <a href="#">@node.Token.ToString()</a>
                <ul>
                    @if (node.Children.Any())
                    {
                        @ShowTree(node.Children)

                    }
                </ul>
            </li>

    }
}
}
                                    </ul>
                                }

                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="col-12">
                
                <hr />
                @if (Model.TableScheme != null)
                {
                    <table class="table">
                        <thead class="thead-inverse">
                        <tr>
                            @foreach (var tableHeader in Model.TableScheme.TableHeaders)
                            {
                                <th>@tableHeader</th>
                            }
                        </tr>
                        </thead>
                        <tbody>
                            @foreach (var tableRow in Model.TableScheme.DataRows)
                            {
                                <tr>
                                    @foreach (var booleanValue in tableRow.Values)
                                    {
                                        <td>
                                            @{ string val = booleanValue ? 1.ToString() : 0.ToString(); }
                                            @val
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>

                    </table>
                }

            </div>
        </div>
    }
</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryValidation")
}
